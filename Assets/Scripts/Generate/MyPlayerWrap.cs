//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MyPlayerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("MyPlayer");
		L.RegFunction("SetVocality", SetVocality);
		L.RegFunction("SetBGM", SetBGM);
		L.RegFunction("Start", Start);
		L.RegFunction("OnDestroy", OnDestroy);
		L.RegFunction("Update", Update);
		L.RegFunction("LateUpdate", LateUpdate);
		L.RegFunction("FixedUpdate", FixedUpdate);
		L.RegFunction("CameraFollow", CameraFollow);
		L.RegFunction("RefitCameraShow", RefitCameraShow);
		L.RegFunction("SyncPlayerInfoMsg", SyncPlayerInfoMsg);
		L.RegFunction("UpdateFrameSynRender", UpdateFrameSynRender);
		L.RegFunction("KeyCodMove", KeyCodMove);
		L.RegFunction("CollectInputCommand", CollectInputCommand);
		L.RegFunction("GetPlayerSpeed", GetPlayerSpeed);
		L.RegFunction("ChangeCameraHight", ChangeCameraHight);
		L.RegVar("player", get_player, set_player);
		L.RegVar("passGameLevelId", get_passGameLevelId, set_passGameLevelId);
		L.RegVar("cameraType", get_cameraType, set_cameraType);
		L.RegVar("cameraSensitive", get_cameraSensitive, set_cameraSensitive);
		L.RegVar("offset", get_offset, set_offset);
		L.RegVar("cameraHeightType", get_cameraHeightType, set_cameraHeightType);
		L.RegVar("roleID", get_roleID, null);
		L.RegVar("myName", get_myName, null);
		L.RegVar("playerInstId", get_playerInstId, null);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetVocality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
			MyPlayer.SetVocality(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBGM(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
			MyPlayer.SetBGM(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Start(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			MyPlayer.Start();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDestroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			MyPlayer.OnDestroy();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Update(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			MyPlayer.Update();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LateUpdate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			MyPlayer.LateUpdate();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FixedUpdate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			MyPlayer.FixedUpdate();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CameraFollow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			MyPlayer.CameraFollow();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RefitCameraShow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
			MyPlayer.RefitCameraShow(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SyncPlayerInfoMsg(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Newtonsoft.Json.Linq.JArray arg0 = (Newtonsoft.Json.Linq.JArray)ToLua.CheckObject<Newtonsoft.Json.Linq.JArray>(L, 1);
			MyPlayer.SyncPlayerInfoMsg(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateFrameSynRender(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Fix64 arg0 = StackTraits<Fix64>.Check(L, 1);
			MyPlayer.UpdateFrameSynRender(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int KeyCodMove(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			MyPlayer.KeyCodMove();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CollectInputCommand(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			MyPlayer.CollectInputCommand();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPlayerSpeed(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			float o = MyPlayer.GetPlayerSpeed();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ChangeCameraHight(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			MyPlayer.ChangeCameraHight();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_player(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, MyPlayer.player);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_passGameLevelId(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, MyPlayer.passGameLevelId);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_cameraType(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, MyPlayer.cameraType);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_cameraSensitive(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, MyPlayer.cameraSensitive);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_offset(IntPtr L)
	{
		try
		{
			ToLua.Push(L, MyPlayer.offset);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_cameraHeightType(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, MyPlayer.cameraHeightType);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_roleID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, MyPlayer.roleID);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_myName(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, MyPlayer.myName);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_playerInstId(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, MyPlayer.playerInstId);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_player(IntPtr L)
	{
		try
		{
			PlayerNpc arg0 = (PlayerNpc)ToLua.CheckObject<PlayerNpc>(L, 2);
			MyPlayer.player = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_passGameLevelId(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			MyPlayer.passGameLevelId = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_cameraType(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			MyPlayer.cameraType = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_cameraSensitive(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			MyPlayer.cameraSensitive = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_offset(IntPtr L)
	{
		try
		{
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			MyPlayer.offset = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_cameraHeightType(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			MyPlayer.cameraHeightType = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

