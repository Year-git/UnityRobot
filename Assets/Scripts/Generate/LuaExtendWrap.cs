//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LuaExtendWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("LuaExtend");
		L.RegFunction("GetMapProgressValue", GetMapProgressValue);
		L.RegFunction("GetMapProgressTotal", GetMapProgressTotal);
		L.RegFunction("GetMapId", GetMapId);
		L.RegFunction("CreatNpcGameObj", CreatNpcGameObj);
		L.RegFunction("GetNpcGameObj", GetNpcGameObj);
		L.RegFunction("RemoveNpcGameObj", RemoveNpcGameObj);
		L.RegFunction("NpcRobotPartClone", NpcRobotPartClone);
		L.RegFunction("NpcRobotPartInstall", NpcRobotPartInstall);
		L.RegFunction("NpcRobotPartUnInstall", NpcRobotPartUnInstall);
		L.RegFunction("PlayerAssembleStart", PlayerAssembleStart);
		L.RegFunction("PlayerAssembleEnd", PlayerAssembleEnd);
		L.RegFunction("GetPlayerPassGameLevel", GetPlayerPassGameLevel);
		L.RegFunction("EnterMap", EnterMap);
		L.RegFunction("EnterGameLevel", EnterGameLevel);
		L.RegFunction("LeaveGameLevel", LeaveGameLevel);
		L.RegFunction("GetNpcHoleCount", GetNpcHoleCount);
		L.RegFunction("GetPlayerHoleCount", GetPlayerHoleCount);
		L.RegFunction("GetNpcHoleType", GetNpcHoleType);
		L.RegFunction("GetPlayerHoleType", GetPlayerHoleType);
		L.RegFunction("GetNpcPartCfgIdByHoleIdx", GetNpcPartCfgIdByHoleIdx);
		L.RegFunction("SetGamePause", SetGamePause);
		L.RegFunction("CreatHoleEffect", CreatHoleEffect);
		L.RegFunction("DestroyHoleEffect", DestroyHoleEffect);
		L.RegFunction("PlayerBattleMap", PlayerBattleMap);
		L.RegFunction("CreateVictoryObj", CreateVictoryObj);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMapProgressValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			int o = LuaExtend.GetMapProgressValue();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMapProgressTotal(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			int o = LuaExtend.GetMapProgressTotal();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMapId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			int o = LuaExtend.GetMapId();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreatNpcGameObj(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				LuaFunction arg1 = ToLua.CheckLuaFunction(L, 2);
				int o = LuaExtend.CreatNpcGameObj(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				LuaFunction arg1 = ToLua.CheckLuaFunction(L, 2);
				LuaTable arg2 = ToLua.CheckLuaTable(L, 3);
				int o = LuaExtend.CreatNpcGameObj(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaExtend.CreatNpcGameObj");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNpcGameObj(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			UnityEngine.GameObject o = LuaExtend.GetNpcGameObj(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveNpcGameObj(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			LuaExtend.RemoveNpcGameObj(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NpcRobotPartClone(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				LuaFunction arg2 = ToLua.CheckLuaFunction(L, 3);
				LuaExtend.NpcRobotPartClone(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				LuaFunction arg2 = ToLua.CheckLuaFunction(L, 3);
				LuaTable arg3 = ToLua.CheckLuaTable(L, 4);
				LuaExtend.NpcRobotPartClone(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaExtend.NpcRobotPartClone");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NpcRobotPartInstall(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				LuaFunction arg3 = ToLua.CheckLuaFunction(L, 4);
				LuaExtend.NpcRobotPartInstall(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 5)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				LuaFunction arg3 = ToLua.CheckLuaFunction(L, 4);
				LuaTable arg4 = ToLua.CheckLuaTable(L, 5);
				LuaExtend.NpcRobotPartInstall(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaExtend.NpcRobotPartInstall");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NpcRobotPartUnInstall(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			LuaExtend.NpcRobotPartUnInstall(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayerAssembleStart(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			LuaExtend.PlayerAssembleStart();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayerAssembleEnd(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			LuaExtend.PlayerAssembleEnd();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPlayerPassGameLevel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			int o = LuaExtend.GetPlayerPassGameLevel();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EnterMap(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			LuaExtend.EnterMap(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EnterGameLevel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			LuaExtend.EnterGameLevel(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LeaveGameLevel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			LuaExtend.LeaveGameLevel();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNpcHoleCount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int o = LuaExtend.GetNpcHoleCount(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPlayerHoleCount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			int o = LuaExtend.GetPlayerHoleCount();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNpcHoleType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int o = LuaExtend.GetNpcHoleType(arg0, arg1);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPlayerHoleType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int o = LuaExtend.GetPlayerHoleType(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNpcPartCfgIdByHoleIdx(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int o = LuaExtend.GetNpcPartCfgIdByHoleIdx(arg0, arg1);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetGamePause(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
			LuaExtend.SetGamePause(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreatHoleEffect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int o = LuaExtend.CreatHoleEffect(arg0, arg1);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestroyHoleEffect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			LuaExtend.DestroyHoleEffect(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayerBattleMap(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			FairyGUI.Shape arg0 = (FairyGUI.Shape)ToLua.CheckObject<FairyGUI.Shape>(L, 1);
			LuaExtend.PlayerBattleMap(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateVictoryObj(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				LuaFunction arg1 = ToLua.CheckLuaFunction(L, 2);
				LuaExtend.CreateVictoryObj(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				LuaFunction arg1 = ToLua.CheckLuaFunction(L, 2);
				LuaTable arg2 = ToLua.CheckLuaTable(L, 3);
				LuaExtend.CreateVictoryObj(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaExtend.CreateVictoryObj");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

