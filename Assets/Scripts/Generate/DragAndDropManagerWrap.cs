//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class DragAndDropManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(DragAndDropManager), typeof(System.Object));
		L.RegFunction("StartDrag", StartDrag);
		L.RegFunction("DragEnd", DragEnd);
		L.RegFunction("New", _CreateDragAndDropManager);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("inst", get_inst, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateDragAndDropManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				DragAndDropManager obj = new DragAndDropManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: DragAndDropManager.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartDrag(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				DragAndDropManager obj = (DragAndDropManager)ToLua.CheckObject<DragAndDropManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				LuaFunction arg1 = ToLua.CheckLuaFunction(L, 3);
				obj.StartDrag(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				DragAndDropManager obj = (DragAndDropManager)ToLua.CheckObject<DragAndDropManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				LuaFunction arg1 = ToLua.CheckLuaFunction(L, 3);
				LuaTable arg2 = ToLua.CheckLuaTable(L, 4);
				obj.StartDrag(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DragAndDropManager.StartDrag");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DragEnd(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DragAndDropManager obj = (DragAndDropManager)ToLua.CheckObject<DragAndDropManager>(L, 1);
			obj.DragEnd();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_inst(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, DragAndDropManager.inst);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

